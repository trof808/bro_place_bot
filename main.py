from decouple import config
from telegram import Update 
from telegram.ext import filters, MessageHandler, ApplicationBuilder, ContextTypes, CommandHandler, ChatMemberHandler
import logging
from calculate_time_until import calculate_time_until
from telegram.constants import ParseMode
from extract_status_change import extract_status_change

BOT_TOKEN= config('BOT_TOKEN')
logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
        )

def remove_job_if_exists(name: str, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """Remove job with given name. Returns whether job was removed."""
    current_jobs = context.job_queue.get_jobs_by_name(name)
    if not current_jobs:
        return False
    for job in current_jobs:
        job.schedule_removal()
    return True

async def bet_reminder_text(context: ContextTypes.DEFAULT_TYPE) -> None:
    job = context.job
    days, hours, minutes, seconds = calculate_time_until(2023, 9, 1, 21, 00, 00)
    print()
    await context.bot.send_message(chat_id=job.data.get('chat_id'), text=f"""
–ù–∞–ø–æ–º–∏–Ω–∞—é –ø—Ä–æ —Å–ø–æ—Ä –º–µ–∂–¥—É –ø—Å–∞–º–∏ üêï \n
–î–ª—è –ø–æ–±–µ–¥—ã –º–ª–∞–¥—à–µ–º—É –ø—Å—É –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å 20 —á–∏—Å—Ç—ã—Ö –æ—Ç–∂–∏–º–∞–Ω–∏–π, —Å—Ç–∞—Ä—à–µ–º—É —Å–∫–∏–Ω—É—Ç—å –¥–æ 80 –∫–≥ 
–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ø–æ—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å: \nüìÖ {days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥ üìÖ\n
–ù–∞–¥–µ—é—Å—å, —á—Ç–æ –∫–∞–∂–¥—ã–π –∏–∑ –≤–∞—Å —Å–¥–µ–ª–∞–ª –º–∞–∫—Å–∏–º—É–º –¥–ª—è –ø–æ–±–µ–¥—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ –∫–æ–Ω—É —Ü–µ–ª—ã–π –∫–∞—Å–∞—Ä—å üí∞
                                   \n
–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç—É—Ç —Å–∫–æ–ª—å–∫–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è —Å–¥–µ–ª–∞—Ç—å –∏–ª–∏ —É–∂–µ —Å–¥–µ–ª–∞–ª –¥–ª—è –ø–æ–±–µ–¥—ã
                                   """)

async def set_bet_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_message.chat_id
    user = update.message.from_user
    try:
        job_removed = remove_job_if_exists(str(chat_id), context)
        data = {'chat_id': chat_id}
        context.job_queue.run_repeating(bet_reminder_text, interval=28800, first=1, data=data)
    except (IndexError, ValueError):
        await update.effective_message.reply_text("Run /start again")

async def greet_chat_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = extract_status_change(update.chat_member)
    was_member, is_member = result
    print(was_member, is_member)
    if not was_member and is_member:
        await context.bot.send_message(chat_id=update.effective_chat.id, text='''
            –ó–¥–∞—Ä–æ–≤–∞ –ü–µ—Å! –ï—Å–ª–∏ —Ç—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –∑–Ω–∞—á–∏—Ç —Ç—ã –∏—Å—Ç–∏–Ω–Ω—ã–π –ø–µ—Å, –º–æ–∂–µ—à—å –≥–æ—Ä–¥–∏—Ç—å—Å—è —ç—Ç–∏–º. \n
            –¢—É—Ç –±—É–¥—É—Ç –≤—Å—è–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–∞–∫–∏—Ö-—Ç–æ —Å–æ–±—ã—Ç–∏—è—Ö, —Å–ø–æ—Ä–∞—Ö, —É–º–Ω—ã–µ –º—ã—Å–ª–∏ –∏ –≥–ª–∞–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –ø–µ—Å
            –ï—Å–ª–∏ —É —Ç–µ–±—è –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –ø–∏—à–∏ –≥–ª–∞–≤–Ω–æ–º—É –ø—Å—É. –í–æ–∑–º–æ–∂–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —á–∞—â–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –ø–µ—Å \n\n
            –ê –ø–æ–∫–∞ –ª–æ–≤–∏ –ø–µ—Ä–≤—É—é –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É
                                   ''')
        await bet_reminder_text(context)
    else:
        return


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_bet_reminder(update, context)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_message.chat_id, text=update.message.text)

if __name__ == '__main__':
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    start_handler = CommandHandler('start', start)
    echo_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), echo)
    new_chat_memeber_handler = ChatMemberHandler(greet_chat_members, ChatMemberHandler.CHAT_MEMBER)

    application.add_handler(start_handler)
    application.add_handler(echo_handler)
    application.add_handler(new_chat_memeber_handler)

    application.run_polling()
